#!/bin/bash

# Configuration file to store connections
CONFIG_FILE="$HOME/.ssh_connections.conf"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to create the configuration file if it doesn't exist
init_config() {
    if [ ! -f "$CONFIG_FILE" ]; then
        touch "$CONFIG_FILE"
        echo -e "${GREEN}Configuration file created: $CONFIG_FILE${NC}"
    fi
}

# Function to show help
show_help() {
    echo -e "${BLUE}=== SSH Connection Manager ===${NC}"
    echo ""
    echo "Usage: conn <command> [options]"
    echo ""
    echo "Available commands:"
    echo "  to <alias>         - Connect to the server with the specified alias"
    echo "  list               - Show the list of all configured servers"
    echo "  add                - Add a new connection"
    echo "  remove <alias>     - Remove an existing connection"
    echo "  reset <alias>      - Remove SSH host key for the specified alias"
    echo "  key <action>       - Manage SSH keys (public|private|create)"
    echo "  update             - Update the script to the latest version from GitHub"
    echo "  help               - Show this help message"
    echo ""
    echo -e "${YELLOW}Tip:${NC} You can backup or manually edit connections at:"
    echo "  ~/.ssh_connections.conf"
    echo ""
}

# Function to list all connections
list_connections() {
    init_config
    
    if [ ! -s "$CONFIG_FILE" ]; then
        echo -e "${YELLOW}No connections configured.${NC}"
        echo -e "${YELLOW}Use 'conn add' to add a new connection.${NC}"
        return
    fi
    
    echo -e "${BLUE}=== SSH Servers List ===${NC}"
    echo ""
    
    sort "$CONFIG_FILE" | while IFS='|' read -r alias user host port; do
        if [ -n "$alias" ]; then
            echo -e "${GREEN}$alias${NC} - ${user}@${host}:${port}"
        fi
    done
    echo ""
}

# Function to add a new connection
add_connection() {
    init_config
    
    echo -e "${BLUE}=== Add New SSH Connection ===${NC}"
    echo ""
    
    # Request alias
    read -p "Type alias: " alias
    if [ -z "$alias" ]; then
        echo -e "${RED}Error: alias cannot be empty!${NC}"
        return 1
    fi
    
    # Check if alias already exists
    if grep -q "^$alias|" "$CONFIG_FILE" 2>/dev/null; then
        echo -e "${RED}Error: alias '$alias' already exists!${NC}"
        return 1
    fi
    
    # Request user (default: root)
    read -p "Type user (default: root): " user
    user=${user:-root}
    
    # Request host
    read -p "Type host: " host
    if [ -z "$host" ]; then
        echo -e "${RED}Error: host cannot be empty!${NC}"
        return 1
    fi
    
    # Request port (default: 22)
    read -p "Type port (default: 22): " port
    port=${port:-22}
    
    # Save the connection
    echo "$alias|$user|$host|$port" >> "$CONFIG_FILE"
    
    echo ""
    echo -e "${GREEN}✓ Connection '$alias' added successfully!${NC}"
    echo -e "  ${user}@${host}:${port}"
    echo ""
}

# Function to remove a connection
remove_connection() {
    init_config
    
    if [ -z "$1" ]; then
        echo -e "${RED}Error: please specify an alias!${NC}"
        echo "Usage: conn remove <alias>"
        return 1
    fi
    
    alias="$1"
    
    # Check if alias exists
    if ! grep -q "^$alias|" "$CONFIG_FILE" 2>/dev/null; then
        echo -e "${RED}Error: alias '$alias' does not exist!${NC}"
        return 1
    fi
    
    # Show connection details
    connection=$(grep "^$alias|" "$CONFIG_FILE")
    IFS='|' read -r al user host port <<< "$connection"
    
    echo -e "${YELLOW}You are about to remove:${NC}"
    echo -e "  Alias: ${GREEN}$al${NC}"
    echo -e "  Connection: ${user}@${host}:${port}"
    echo ""
    
    # Ask for confirmation
    read -p "Are you sure you want to proceed? (y/N): " confirm
    
    if [[ "$confirm" =~ ^[yY]$ ]]; then
        # Remove the line from file
        sed -i.bak "/^$alias|/d" "$CONFIG_FILE"
        rm -f "${CONFIG_FILE}.bak"
        echo -e "${GREEN}✓ Connection '$alias' removed successfully!${NC}"
    else
        echo -e "${YELLOW}Operation cancelled.${NC}"
    fi
}

# Function to connect to a server
connect_to() {
    init_config
    
    if [ -z "$1" ]; then
        echo -e "${RED}Error: please specify an alias!${NC}"
        echo "Usage: conn to <alias>"
        return 1
    fi
    
    alias="$1"
    
    # Check if SSH key exists
    SSH_KEY_PATH="$HOME/.ssh/id_rsa"
    if [ ! -f "$SSH_KEY_PATH" ]; then
        echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo -e "${YELLOW}⚠  SSH key not found!${NC}"
        echo -e "${YELLOW}   Run 'conn key create' to generate a new key pair.${NC}"
        echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo ""
        read -p "Do you want to continue anyway? (y/N): " confirm
        if [[ ! "$confirm" =~ ^[yY]$ ]]; then
            echo -e "${YELLOW}Connection cancelled.${NC}"
            return 0
        fi
        echo ""
    fi
    
    # Check for updates
    check_for_updates
    
    # Search for the connection
    connection=$(grep "^$alias|" "$CONFIG_FILE" 2>/dev/null)
    
    if [ -z "$connection" ]; then
        echo -e "${RED}Error: alias '$alias' does not exist!${NC}"
        echo -e "${YELLOW}Use 'conn list' to see available connections.${NC}"
        return 1
    fi
    
    # Extract details
    IFS='|' read -r al user host port <<< "$connection"
    
    echo -e "${GREEN}Connecting to $alias...${NC}"
    echo -e "  ${user}@${host}:${port}"
    echo ""
    
    # Execute SSH connection
    ssh "$user@$host" -p "$port"
}

# Function to reset SSH keys
reset_host() {
    init_config
    
    if [ -z "$1" ]; then
        echo -e "${RED}Error: please specify an alias!${NC}"
        echo "Usage: conn reset <alias>"
        return 1
    fi
    
    alias="$1"
    
    # Search for the connection
    connection=$(grep "^$alias|" "$CONFIG_FILE" 2>/dev/null)
    
    if [ -z "$connection" ]; then
        echo -e "${RED}Error: alias '$alias' does not exist!${NC}"
        return 1
    fi
    
    # Extract host
    IFS='|' read -r al user host port <<< "$connection"
    
    echo -e "${YELLOW}Resetting SSH keys for:${NC}"
    echo -e "  Host: ${host}"
    echo -e "  Port: ${port}"
    echo ""
    
    # Execute ssh-keygen -R
    if [ "$port" == "22" ]; then
        ssh-keygen -R "$host"
    else
        ssh-keygen -R "[$host]:$port"
    fi
    
    echo ""
    echo -e "${GREEN}✓ SSH keys reset for '$alias'!${NC}"
}

# Function to manage SSH keys
manage_keys() {
    SSH_KEY_PATH="$HOME/.ssh/id_rsa"
    SSH_PUB_KEY_PATH="$HOME/.ssh/id_rsa.pub"
    
    if [ -z "$1" ]; then
        echo -e "${RED}Error: please specify an action!${NC}"
        echo "Usage: conn key <public|private|create>"
        return 1
    fi
    
    action="$1"
    
    case "$action" in
        public)
            if [ ! -f "$SSH_PUB_KEY_PATH" ]; then
                echo -e "${RED}Error: SSH public key not found!${NC}"
                echo -e "${YELLOW}Run 'conn key create' to generate a new key pair.${NC}"
                return 1
            fi
            
            echo -e "${BLUE}=== SSH Public Key ===${NC}"
            echo ""
            cat "$SSH_PUB_KEY_PATH"
            echo ""
            echo -e "${YELLOW}Path:${NC} $SSH_PUB_KEY_PATH"
            echo ""
            ;;
            
        private)
            if [ ! -f "$SSH_KEY_PATH" ]; then
                echo -e "${RED}Error: SSH private key not found!${NC}"
                echo -e "${YELLOW}Run 'conn key create' to generate a new key pair.${NC}"
                return 1
            fi
            
            echo -e "${BLUE}=== SSH Private Key ===${NC}"
            echo ""
            echo -e "${YELLOW}Warning: Keep this key secret!${NC}"
            echo ""
            cat "$SSH_KEY_PATH"
            echo ""
            echo -e "${YELLOW}Path:${NC} $SSH_KEY_PATH"
            echo ""
            ;;
            
        create)
            if [ -f "$SSH_KEY_PATH" ]; then
                echo -e "${YELLOW}SSH key already exists at: $SSH_KEY_PATH${NC}"
                echo ""
                read -p "Do you want to overwrite it? (y/N): " confirm
                
                if [[ ! "$confirm" =~ ^[yY]$ ]]; then
                    echo -e "${YELLOW}Operation cancelled.${NC}"
                    echo ""
                    echo -e "${BLUE}Showing existing public key:${NC}"
                    echo ""
                    cat "$SSH_PUB_KEY_PATH"
                    echo ""
                    return 0
                fi
            fi
            
            echo -e "${BLUE}=== Creating SSH Key Pair ===${NC}"
            echo ""
            
            # Create .ssh directory if it doesn't exist
            mkdir -p "$HOME/.ssh"
            chmod 700 "$HOME/.ssh"
            
            # Generate SSH key
            ssh-keygen -t rsa -b 4096 -f "$SSH_KEY_PATH" -N ""
            
            if [ $? -eq 0 ]; then
                echo ""
                echo -e "${GREEN}✓ SSH key pair created successfully!${NC}"
                echo ""
                echo -e "${BLUE}Your public key:${NC}"
                echo ""
                cat "$SSH_PUB_KEY_PATH"
                echo ""
                echo -e "${YELLOW}Path:${NC} $SSH_KEY_PATH"
                echo ""
            else
                echo -e "${RED}Error: failed to create SSH key pair!${NC}"
                return 1
            fi
            ;;
            
        *)
            echo -e "${RED}Error: unknown action '$action'${NC}"
            echo "Usage: conn key <public|private|create>"
            return 1
            ;;
    esac
}

# Function to check for updates
check_for_updates() {
    REPO_URL="https://raw.githubusercontent.com/andreapollastri/ssh-connection-manager/main/conn"
    
    # Create temporary file
    TMP_FILE=$(mktemp)
    
    # Download the remote version silently
    if command -v curl &> /dev/null; then
        curl -fsSL "$REPO_URL" -o "$TMP_FILE" 2>/dev/null
    elif command -v wget &> /dev/null; then
        wget -q "$REPO_URL" -O "$TMP_FILE" 2>/dev/null
    else
        rm -f "$TMP_FILE"
        return 0
    fi
    
    # Check if download was successful
    if [ $? -ne 0 ] || [ ! -s "$TMP_FILE" ]; then
        rm -f "$TMP_FILE"
        return 0
    fi
    
    # Find the script path
    SCRIPT_PATH="$(readlink -f "$0" 2>/dev/null || greadlink -f "$0" 2>/dev/null || echo "$0")"
    if [ "$SCRIPT_PATH" = "$0" ]; then
        SCRIPT_PATH="$(cd "$(dirname "$0")" && pwd)/$(basename "$0")"
    fi
    
    # Compare files
    if ! cmp -s "$SCRIPT_PATH" "$TMP_FILE"; then
        echo ""
        echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo -e "${YELLOW}⚠  A new version of the script is available!${NC}"
        echo -e "${YELLOW}   Run 'conn update' to update to the latest version.${NC}"
        echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo ""
    fi
    
    rm -f "$TMP_FILE"
}

# Function to update the script
update_script() {
    echo -e "${BLUE}=== Update SSH Connection Manager ===${NC}"
    echo ""
    
    # GitHub repository URL
    REPO_URL="https://raw.githubusercontent.com/andreapollastri/ssh-connection-manager/main/conn"
    
    # Find the script path
    SCRIPT_PATH="$(readlink -f "$0" 2>/dev/null || greadlink -f "$0" 2>/dev/null || echo "$0")"
    
    # For macOS compatibility, use realpath alternative
    if [ "$SCRIPT_PATH" = "$0" ]; then
        SCRIPT_PATH="$(cd "$(dirname "$0")" && pwd)/$(basename "$0")"
    fi
    
    echo -e "Current script: ${YELLOW}$SCRIPT_PATH${NC}"
    echo ""
    
    # Create temporary file
    TMP_FILE=$(mktemp)
    
    echo "Downloading latest version from GitHub..."
    
    # Download the new version
    if command -v curl &> /dev/null; then
        curl -fsSL "$REPO_URL" -o "$TMP_FILE"
    elif command -v wget &> /dev/null; then
        wget -q "$REPO_URL" -O "$TMP_FILE"
    else
        echo -e "${RED}Error: neither curl nor wget is available!${NC}"
        rm -f "$TMP_FILE"
        return 1
    fi
    
    # Check if download was successful
    if [ $? -ne 0 ] || [ ! -s "$TMP_FILE" ]; then
        echo -e "${RED}Error: failed to download the update!${NC}"
        rm -f "$TMP_FILE"
        return 1
    fi
    
    # Backup current version
    cp "$SCRIPT_PATH" "${SCRIPT_PATH}.backup"
    
    # Replace with new version
    mv "$TMP_FILE" "$SCRIPT_PATH"
    chmod +x "$SCRIPT_PATH"
    
    echo ""
    echo -e "${GREEN}✓ Script updated successfully!${NC}"
    echo -e "${YELLOW}Note: A backup of the previous version was saved to:${NC}"
    echo "  ${SCRIPT_PATH}.backup"
    echo ""
}

# Main script
main() {
    if [ $# -eq 0 ]; then
        show_help
        return
    fi
    
    command="$1"
    shift
    
    case "$command" in
        to)
            connect_to "$@"
            ;;
        list)
            list_connections
            ;;
        add)
            add_connection
            ;;
        remove)
            remove_connection "$@"
            ;;
        reset)
            reset_host "$@"
            ;;
        key)
            manage_keys "$@"
            ;;
        update)
            update_script
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            echo -e "${RED}Error: unknown command '$command'${NC}"
            echo ""
            show_help
            return 1
            ;;
    esac
}

# Execute main
main "$@"
